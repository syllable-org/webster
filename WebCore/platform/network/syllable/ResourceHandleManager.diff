Index: ResourceHandleManager.cpp
===================================================================
RCS file: /cvsroot/abrowse/ABrowse_0_7/WebCore/platform/network/syllable/ResourceHandleManager.cpp,v
retrieving revision 1.3
retrieving revision 1.4
diff -u -r1.3 -r1.4
--- ResourceHandleManager.cpp	13 Apr 2008 15:05:29 -0000	1.3
+++ ResourceHandleManager.cpp	13 Apr 2008 16:19:53 -0000	1.4
@@ -55,6 +55,7 @@
 #include "CookieJar.h"
 #include "Document.h"
 #include "CString.h"
+#include "SyllableDebug.h"
 
 /* XXXKV: This doesn't belong here */
 os::Locker g_cGlobalMutex( "global_mutex" );
@@ -179,11 +180,11 @@
 			ReportFailure();
 			return ( false );			
 		}
-		printf( "Loading %s...\n", cFile.c_str() );
+		DEBUG( "Loading %s...\n", cFile.c_str() );
 		m_nFile = open( cFile.c_str(), O_RDONLY );
 		if( m_nFile < 0 )
 		{
-			printf( "Could not open file!\n" );
+			DEBUG( "Could not open file!\n" );
 			ReportFailure();
 			return ( false );
 		}
@@ -200,7 +201,7 @@
 
 	if( nLength < 0 )
 	{
-		printf( "Could not read from %s!\n", os::String ( m_cURL.string(  ) ).c_str(  ) );
+		DEBUG( "Could not read from %s!\n", os::String ( m_cURL.string(  ) ).c_str(  ) );
 		ReportFailure();
 		return ( false );
 	}
@@ -298,11 +299,11 @@
 			}
 		}
 
-		printf( "Location: %s Mime: %s Charset: %s Size: %i Response: %i\n", cLocation.c_str(), cMimeType.c_str(), cCharset.c_str(), nDataSize, nResponseCode );
+		DEBUG( "Location: %s Mime: %s Charset: %s Size: %i Response: %i\n", cLocation.c_str(), cMimeType.c_str(), cCharset.c_str(), nDataSize, nResponseCode );
 
 		
 	
-		//printf("Pass response!\n");
+		//DEBUG("Pass response!\n");
 		/* Pass response */
 		ResourceResponse cResponse( m_cURL, cMimeType, nDataSize, cCharset, "" );
 		cResponse.setHTTPStatusCode( nResponseCode );
@@ -330,7 +331,7 @@
 		{
 			ResourceRequest* pcRequest = &m_pcHandle->getInternal()->m_request;
 			KURL cURL( pcRequest->url(), DeprecatedString( cLocation.c_str() ) );
-			//printf( "Redirect to %s... (%i %x) from %s\n", cURL.string().ascii(), m_pcHandle->refCount(), (uint)m_pcHandle, pcRequest->url().string().ascii() );
+			//DEBUG( "Redirect to %s... (%i %x) from %s\n", cURL.string().ascii(), m_pcHandle->refCount(), (uint)m_pcHandle, pcRequest->url().string().ascii() );
 			
 			
 			/* TODO: Is this correct? */
@@ -367,7 +368,7 @@
 	size_t nSize = m_cDataBuffer.Read( anBuffer, 65536 );
 	m_cDataLock.Unlock();
 
-	printf("%i bytes\n", nSize );
+	DEBUG("%i bytes\n", nSize );
 	if( nSize > 0 )
 	{
 		GetClient()->didReceiveData( m_pcHandle, anBuffer, nSize, nSize );
@@ -386,7 +387,7 @@
 	bool bReturn;
 	if( m_bCancel )
 	{
-		printf( "Error: Tried to process canceled job!\n" );
+		DEBUG( "Error: Tried to process canceled job!\n" );
 		return( false );
 	}
 	if( !m_bIsHTTP )
@@ -447,7 +448,7 @@
 			pcGate = &g_cConnectLock;
 		break;
 		default:
-			printf( "Error: getLockGate() called with invalid lock\n" );
+			DEBUG( "Error: getLockGate() called with invalid lock\n" );
 			return( NULL );
 		break;
 	}
@@ -458,7 +459,7 @@
 void lockCallback( CURL* pcHandle, curl_lock_data eData, curl_lock_access eAccess, void* pPtr )
 {
 	CURLDataGate* pcGate = getLockGate( eData );
-	printf( "lockCallback %i %i\n", eData, eAccess );
+	DEBUG( "lockCallback %i %i\n", eData, eAccess );
 	
 
 	if( pcGate == NULL )
@@ -479,14 +480,14 @@
 void unlockCallback( CURL* pcHandle, curl_lock_data eData, void* pPtr )
 {
 	CURLDataGate* pcGate = getLockGate( eData );
-	printf( "unlockCallback %i\n", eData );
+	DEBUG( "unlockCallback %i\n", eData );
 	
 	if( pcGate == NULL )
 		return;
 	
 	if( !pcGate->IsLocked() )
 	{
-		printf( "Error: unlockCallback() called but gate not locked!\n" );
+		DEBUG( "Error: unlockCallback() called but gate not locked!\n" );
 		return;
 	}
 	if( pcGate->m_bShared )
@@ -504,7 +505,7 @@
 	if( totalSize <= 0 || ptr == NULL )
 		return totalSize;
 
-	printf( "Received %i bytes\n", totalSize );
+	DEBUG( "Received %i bytes\n", totalSize );
 	pcJob->m_bMetaDataRead = true;
 	pcJob->m_cDataLock.Lock();
 	pcJob->m_cDataBuffer.Write( ptr, totalSize );
@@ -523,7 +524,7 @@
 	int totalSize = size * nmemb;
 	if( totalSize <= 0 || ptr == NULL )
 		return totalSize;
-	printf( "Received %i header bytes\n", totalSize );	
+	DEBUG( "Received %i header bytes\n", totalSize );	
 	pcJob->m_cDataLock.Lock();
 	pcJob->m_cMetaData.push_back( os::String( (const char*)ptr, totalSize ) );
 	pcJob->m_cDataLock.Unlock();
@@ -545,7 +546,7 @@
 
 static void SSLLockCallback( int nMode, int nLock, const char* pzFile, int nLine )
 {
-	printf( "SSL lock %i %i\n", nLock, nMode & CRYPTO_LOCK );
+	DEBUG( "SSL lock %i %i\n", nLock, nMode & CRYPTO_LOCK );
 	if( nMode & CRYPTO_LOCK )
 		g_apcSSLLocks[nLock]->Lock();
 	else
@@ -561,7 +562,7 @@
 bool SyllableJob::LoadHTTP( CURL* pcCurlHandle, CURLM* pcMulti )
 {
 	char nErrorBuffer[CURL_ERROR_SIZE];
-	printf( "LoadHTTP() %s by thread %i...\n", os::String( m_cURL.string() ).c_str(), m_hProcessingThread );
+	DEBUG( "LoadHTTP() %s by thread %i...\n", os::String( m_cURL.string() ).c_str(), m_hProcessingThread );
 
 	os::String cURL = os::String( m_cURL.string() );
 	
@@ -595,7 +596,7 @@
 	if( cRequest.httpBody() && !cRequest.httpBody(  )->isEmpty(  ) )
 	{
 		cPostData = cRequest.httpBody()->flattenToString(  ).deprecatedString(  );
-		printf( "Post data %s %i\n", cPostData.ascii(), cPostData.length(  ) );
+		DEBUG( "Post data %s %i\n", cPostData.ascii(), cPostData.length(  ) );
 	}
 
 	/* Build http header */
@@ -657,7 +658,7 @@
 	if( nRes != CURLM_CALL_MULTI_PERFORM && nRes != CURLM_OK )
 	{
 		curl_slist_free_all( psHeaderList );		
-		printf( "Error: Failed to add CURL handle!\n" );
+		DEBUG( "Error: Failed to add CURL handle!\n" );
 		return( false );
 	}
 	
@@ -728,7 +729,7 @@
 	/* Perform */
 	CURLcode nResult = curl_easy_perform( pcCurlHandle );
 #endif	
-	printf( "CURL request returned %i\n", nResult );
+	DEBUG( "CURL request returned %i\n", nResult );
 	
 	curl_multi_remove_handle( pcMulti, pcCurlHandle );
 	
@@ -741,7 +742,7 @@
 	}
 	m_bMetaDataRead = true;
 	m_bDataLoaded = true;
-	printf( "%i Finished!\n", get_thread_id( NULL ) );
+	DEBUG( "%i Finished!\n", get_thread_id( NULL ) );
 	return( false );
 }
 
@@ -755,7 +756,7 @@
 
 void SyllableJob::ReportSuccess()
 {
-	printf( "%s finished!\n", os::String ( m_cURL.string(  ) ).c_str(  ) );
+	DEBUG( "%s finished!\n", os::String ( m_cURL.string(  ) ).c_str(  ) );
 
 	GetClient()->didFinishLoading( m_pcHandle );
 }
@@ -764,13 +765,13 @@
 /* HTTP worker thread */
 SyllableHTTPWorker::SyllableHTTPWorker():os::Thread( "webcore_http_worker" )
 {
-	printf( "Created new HTTP worker thread\n" );
+	DEBUG( "Created new HTTP worker thread\n" );
 }
 
 
 int32 SyllableHTTPWorker::Run()
 {
-	printf( "HTTP worker thread %i running\n", get_thread_id( NULL ) );
+	DEBUG( "HTTP worker thread %i running\n", get_thread_id( NULL ) );
 	
 	CURL* pcHandle = curl_easy_init();
 	CURLM* pcMulti = curl_multi_init();
@@ -783,7 +784,7 @@
 		if( pcJob == NULL )
 		{
 			/* Exit thread */
-			printf( "HTTP worker thread %i exit\n", get_thread_id( NULL ) );
+			DEBUG( "HTTP worker thread %i exit\n", get_thread_id( NULL ) );
 			curl_easy_cleanup( pcHandle );
 			curl_multi_cleanup( pcMulti );
 			g_pcLoader->WorkerFinished();
@@ -813,11 +814,11 @@
 	curl_share_setopt( g_pcShareHandle, CURLSHOPT_LOCKFUNC, lockCallback );
 	curl_share_setopt( g_pcShareHandle, CURLSHOPT_UNLOCKFUNC, unlockCallback );
 	if( curl_share_setopt( g_pcShareHandle, CURLSHOPT_SHARE, CURL_LOCK_DATA_COOKIE ) != CURLSHE_OK )
-		printf( "Error: Could not setup shared cookies\n" );
+		DEBUG( "Error: Could not setup shared cookies\n" );
 	if( curl_share_setopt( g_pcShareHandle, CURLSHOPT_SHARE, CURL_LOCK_DATA_DNS ) != CURLSHE_OK )
-		printf( "Error: Could not setup shared dns entries\n" );
+		DEBUG( "Error: Could not setup shared dns entries\n" );
 	/* Create SSL locks */
-	printf( "Creating %i SSL locks\n", CRYPTO_num_locks() );
+	DEBUG( "Creating %i SSL locks\n", CRYPTO_num_locks() );
 	g_apcSSLLocks = (os::Locker**)malloc( sizeof( os::Locker* ) * CRYPTO_num_locks() );
 	for( int i = 0; i < CRYPTO_num_locks(); i++ )
 		g_apcSSLLocks[i] = new os::Locker( "ssl_lock" );
@@ -840,7 +841,7 @@
 {
 	if( pcHandle == NULL || pcHandle->getInternal() == NULL )
 	{
-		printf( "Error: SyllableLoader::AddJob() Tried to add empty job!\n" );
+		DEBUG( "Error: SyllableLoader::AddJob() Tried to add empty job!\n" );
 		return;
 	}
 	
@@ -870,7 +871,7 @@
 	{
 		if( m_cJobs[i]->m_pcHandle == pcHandle )
 		{
-			printf( "Cancel loading of %s!\n", os::String ( m_cJobs[i]->m_cURL.string(  ) ).c_str(  ) );
+			DEBUG( "Cancel loading of %s!\n", os::String ( m_cJobs[i]->m_cURL.string(  ) ).c_str(  ) );
 
 			/* Wait for the http thread */
 			SyllableJob *pcJob = m_cJobs[i];
@@ -878,7 +879,7 @@
 			if( pcJob->m_hProcessingThread != -1 )
 			{
 				/* TODO: Signal the thread to quit */
-				printf( "Wait for http thread to finish...\n" );
+				DEBUG( "Wait for http thread to finish...\n" );
 
 				/* The Run() method might delete the job while we are sleeping */
 				g_cGlobalMutex.Unlock();
@@ -890,21 +891,21 @@
 			{
 				m_cJobs.erase( m_cJobs.begin() + i );
 				delete( pcJob );
-				printf( "Job canceled\n" );
+				DEBUG( "Job canceled\n" );
 			} else {
-				printf( "Cancel of loading delayed\n" );
+				DEBUG( "Cancel of loading delayed\n" );
 			}
 			g_cGlobalMutex.Unlock();
 			return;
 		}
 	}
-	printf("Job to cancel not found!\n");
+	DEBUG("Job to cancel not found!\n");
 	g_cGlobalMutex.Unlock();
 }
 
 int32 SyllableLoader::Run()
 {
-	printf( "Loader running!\n" );
+	DEBUG( "Loader running!\n" );
 	while( !m_bQuit )
 	{
 		g_cGlobalMutex.Lock();
@@ -921,7 +922,7 @@
 				/* Do not delete the job if it is still processed by the http loader */
 				if( pcJob->m_hProcessingThread != -1 )
 				{
-					printf("SyllableLoader::Run(): Job still processed\n" );
+					DEBUG("SyllableLoader::Run(): Job still processed\n" );
 					pcJob->m_bCancel = true;
 					pcJob->m_bIsRunning = false;
 					continue;
@@ -939,7 +940,7 @@
 					}
 				}
 				if( !bFound && !pcJob->m_bCancel )
-					printf( "Error: Could not find processed job in joblist\n" );
+					DEBUG( "Error: Could not find processed job in joblist\n" );
 				
 				delete( pcJob );
 				goto end;
@@ -954,7 +955,7 @@
 		else
 			snooze( 10000 );
 	}
-	printf("Loader quit!\n");
+	DEBUG("Loader quit!\n");
 	return ( 0 );
 }
 
@@ -979,7 +980,7 @@
 
 void SyllableLoader::WorkerFinished()
 {
-	printf("WorkerFinished\n");
+	DEBUG("WorkerFinished\n");
 	m_nRunningWorkers--;
 	ASSERT( m_nRunningWorkers >= 0 );
 }
@@ -1004,7 +1005,7 @@
 
 ResourceHandleManager::~ResourceHandleManager()
 {
-	printf( "ResourceHandleManager::~ResourceHandleManager()\n" );
+	DEBUG( "ResourceHandleManager::~ResourceHandleManager()\n" );
 	g_pcLoader->Quit();
 	g_pcLoader->WaitFor();
 	delete( g_pcLoader );
@@ -1018,14 +1019,14 @@
 #if 0
 	ResourceHandleInternal *d = resource->getInternal();
 
-	printf( "ResourceHandleManager::add %s\n", d->m_request.url().string().utf8().data() );
+	DEBUG( "ResourceHandleManager::add %s\n", d->m_request.url().string().utf8().data() );
 
 	if( resource->method() == "POST" )
 	{
 		ASSERT( resource->postData() );
 		DeprecatedString postData = resource->postData()->flattenToString(  ).deprecatedString(  );
 
-		printf( "POST DATA %s\n", os::String ( postData ).c_str() );
+		DEBUG( "POST DATA %s\n", os::String ( postData ).c_str() );
 	}
 #endif
 	g_pcLoader->AddJob( resource );
